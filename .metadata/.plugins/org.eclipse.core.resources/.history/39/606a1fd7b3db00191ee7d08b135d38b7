package module6;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.data.PointFeature;
import de.fhpotsdam.unfolding.data.ShapeFeature;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.marker.SimpleLinesMarker;
import de.fhpotsdam.unfolding.marker.SimplePointMarker;
import de.fhpotsdam.unfolding.utils.MapUtils;
import de.fhpotsdam.unfolding.geo.Location;
import parsing.ParseFeed;
import processing.core.PApplet;

/**
 * An applet that shows airports (and routes) on a world map.
 * 
 * @author Adam Setters and the UC San Diego Intermediate Software Development
 *         MOOC team
 *
 */
public class AirportMap extends PApplet {

	UnfoldingMap map;
	private List<Marker> airportList;
	List<Marker> routeList;

	public void setup() {
		// setting up PAppler
		size(1000, 600, OPENGL);

		// setting up map and default events
		map = new UnfoldingMap(this, 250, 50, 750, 500);
		MapUtils.createDefaultEventDispatcher(this, map);

		// get features from airport data
		List<PointFeature> features = ParseFeed.parseAirports(this, "airports.dat");

		// list for markers, hashmap for quicker access when matching with routes
		airportList = new ArrayList<Marker>();
		HashMap<Integer, Location> airports = new HashMap<Integer, Location>();
		// hashmap that will store airport ID and number of routes starting there
		HashMap<Integer, Integer> airports_routes = new HashMap<Integer, Integer>();
		// create markers from features
		for (PointFeature feature : features) {

			// put airport in hashmap with OpenFlights unique id for key
			airports.put(Integer.parseInt(feature.getId()), feature.getLocation());
			airports_routes.put(Integer.parseInt(feature.getId()), 0);
		}

		// parse route data
		List<ShapeFeature> routes = ParseFeed.parseRoutes(this, "routes.dat");
		routeList = new ArrayList<Marker>();

		// count the number of routes from each airport
		for (ShapeFeature route : routes) {

			// get source and destination airportIds
			int source = Integer.parseInt((String) route.getProperty("source"));
			int dest = Integer.parseInt((String) route.getProperty("destination"));

			if (airports.containsKey(source) && airports.containsKey(dest)) {
				airports_routes.put(source, airports_routes.get(source) + 1);
			}
		}

		// count the number of routes from each airport
		for (ShapeFeature route : routes) {

			// get source and destination airportIds
			int source = Integer.parseInt((String) route.getProperty("source"));
			int dest = Integer.parseInt((String) route.getProperty("destination"));

			// if both ends of the route have at least 200 flights
			if (airports.containsKey(source) && airports.containsKey(dest) && airports_routes.get(source) >= 300
					&& airports_routes.get(dest) >= 300) {
				route.addLocation(airports.get(source));
				route.addLocation(airports.get(dest));
				System.out.println(airports_routes.get(source));

				SimpleLinesMarker sl = new SimpleLinesMarker(route.getLocations(), route.getProperties());
				sl.setColor(color(200));
				System.out.println(sl.getProperties());

				// UNCOMMENT IF YOU WANT TO SEE ALL ROUTES
				routeList.add(sl);
			}

		}

		// loop over the airports and add markers for those with more than 300 routes
		for (PointFeature feature : features) {
			int airport_routecount = airports_routes.get(Integer.parseInt(feature.getId()));
			if (airport_routecount >= 300) {
				AirportMarker m = new AirportMarker(feature);
				m.setProperty("routecount", airport_routecount);
				float rad = map(airport_routecount, 300, 600, 2, 15);
				println(rad);
				m.setRadius(rad);
				airportList.add(m);

			}
		}

		// UNCOMMENT IF YOU WANT TO SEE ALL ROUTES
		map.addMarkers(routeList);

		map.addMarkers(airportList);

		sortAndPrint(5);
	}

	private void sortAndPrint(int numToPrint) {
		Object[] airportRoutes = airportList.toArray();
		Arrays.sort(airportRoutes);
		for (int i = 0; i < min(numToPrint, airportRoutes.length); i++) {
			System.out.println(airportRoutes[i]);
		}
	}

	public void draw() {
		background(0);
		map.draw();
		addKey();
		addTop5();

	}

	public void addKey() {

		fill(255);
		rect(50, 50, 200, 175);
		ellipse(70, 100, 10, 10);
		line(65, 150, 80, 150);

		fill(0);
		text("KEY", 60, 70);
		text("Major Hub (>300 routes)", 90, 105);
		text("circled sized by no. of routes", 60, 125);
		text("Route (joins 2 Hubs)", 90, 155);
	}

	public void addTop5() {

		fill(255);
		rect(50, 255, 200, 250);

		fill(0);
		text("Top 5 Hubs", 60, 270);

	}

}
